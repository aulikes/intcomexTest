spring:
  datasource:
    url: jdbc:postgresql://${RDS_ENDPOINT}:5432/postgres
    username: ${RDS_USER}
    password: ${RDS_PASSWORD}
    driver-class-name: org.postgresql.Driver

  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: 5672
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASS}

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

security:
  users:
    - username: ${API_ADMIN_NAME}
      password: ${API_ADMIN_PASS}
      roles:
        - ADMIN
    - username: ${API_USER_NAME}
      password: ${API_USER_PASS}
      roles:
        - USER


---

server:
  port: 80

---

app:
  # Zona Horaria
  customerZone :
    timezone: America/Bogota      #Zona por defecto
    headerComponent: "X-Timezone" #Nombre del componente en el header para obtener la zona del cliente

  imagesCategory:
    # Ruta base donde se guardaran las imágenes de las categorías en entorno local
    imagePublicPath: ./images/categories/
    # Ruta base donde se encuentran las imágenes de las categorías iniciales para cargarlas al aplicativo
    imageBasePath: static/images/initial/
    # Tamaño máximo de las imágenes de las categorías en bytes (10MB)
    sizeImageCat: 10485760
    # Formato de imágenes permitidas
    formatImages:
      - "image/png"
      - "image/jpeg"
      - "image/jpg"
      - "image/gif"

  # Configuración de carga masiva al inicio
  initialProductLoad:
    total: 100000           # Productos totales a cargar
    batchSize: 1000         # Máximo de productos por lote en la carga inicial de productos

  # Configuración para cola y procesamiento por lotes
  productQueue:
    batchSize: 1000         # Máximo de productos por lote cuando se carga por endpoint-batch
    queueCapacity: 5000     # Máximo de lotes en la cola
    workerCount: 0          # Hilos consumidores de la cola (Si es 0 toma los obtenidos por la Máquina)

  jwt: #Duración del Token
    expiration-millis: 9000000  # 150 minutos

  aws:
    s3:
      bucket: intcomex-s3-imagenes
      region: us-east-2
      accessKeyId: ${AWS_ACCESS_KEY_ID}
      secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
      urlBase: https://intcomex-s3-imagenes.s3.amazonaws.com/

  eventRabbitmq:
    productEventConfig:
      queueName: product.created.queue
      exchange: product.exchange
      routingKey: product.create
